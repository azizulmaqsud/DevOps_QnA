Real-time Interview Crackers!  Part # 19
(Terraform for the Freshers + Experienced)
Terraform Day-2-day 
Workspace Simulations 
in the Real-time 
(12 Questions & Scenarios)
Terraform with Hands-on
Questionnaire 
1.	What is Terraform, and how does it work?
2.	How do you import manually created resources into Terraform?
3.	How do you manage multiple environments (dev, stage, prod) using Terraform?
4.	What is the Terraform state file, and why is it important?
5.	A junior DevOps engineer accidentally deleted the Terraform state file. How would you resolve this?
6. How do you run batch scripts after creating resources with Terraform?
7. How do you implement blue-green deployment using Terraform?
8. How do you integrate Terraform with CI/CD pipelines?
9. How do you manage secrets in Terraform?
10. How do you upgrade Terraform from version 1.7 to 1.8?
11. Simulation Scenario: Destroying a Single Resource
12. Simulation Scenario: Using Terraform Count Feature

In Detail:
1. What is Terraform, and how does it work?
•	Definition: Terraform is an Infrastructure as Code (IaC) tool that allows you to define and provision infrastructure using declarative configuration files.
•	How It Works:
1.	Write Configuration Files: Define your infrastructure in .tf files using HashiCorp Configuration Language (HCL).
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
}
2.	Initialize Terraform: Run terraform init to download necessary providers and modules.
3.	Plan: Use terraform plan to preview changes.
4.	Apply: Use terraform apply to create or update infrastructure.
5.	State File: Terraform maintains a state file (terraform.tfstate) to track the current state of your infrastructure.
2. How do you import manually created resources into Terraform?
•	Scenario: A DevOps engineer manually created an EC2 instance on AWS. Now, the team wants to manage it using Terraform.
•	Steps:
1.	Write Configuration: Define the resource in a .tf file.
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
}
2.	Import Resource: Use the terraform import command.
terraform import aws_instance.example <instance-id>
3.	Verify: Run terraform plan to ensure the configuration matches the actual resource.

3. How do you manage multiple environments (dev, stage, prod) using Terraform?
•	Approach 1: Terraform Workspaces
o	Create separate workspaces for each environment.
terraform workspace new dev
terraform workspace new stage
terraform workspace new prod
o	Switch workspaces and apply configurations.
terraform workspace select dev
terraform apply
•	Approach 2: Terraform Modules
o	Create reusable modules and pass environment-specific variables.
module "vpc" {
  source = "./modules/vpc"
  env    = "dev"
}

4. What is the Terraform state file, and why is it important?
•	Definition: The state file (terraform.tfstate) is a JSON file that stores the current state of your infrastructure.
•	Importance:
o	Tracks the mapping between resources in your configuration and real-world infrastructure.
o	Enables Terraform to determine what changes need to be made during terraform apply.
•	Best Practices:
o	Store the state file remotely (e.g., in an S3 bucket) for collaboration and backup.
o	Enable state locking to prevent concurrent updates.

5. A junior DevOps engineer accidentally deleted the Terraform state file. How would you resolve this?
•	Steps:
1.	Restore from Backup: If a backup exists, restore the state file.
2.	Recreate State File Manually:
	Use terraform import to re-import each resource.
terraform import aws_instance.example <instance-id>
3.	Verify: Run terraform plan to ensure the state file matches the actual infrastructure.

6. How do you run batch scripts after creating resources with Terraform?
•	Use Provisioners:
o	Example: Run a script on an EC2 instance after creation.
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"

  provisioner "remote-exec" {
    inline = [
      "chmod +x /path/to/script.sh",
      "/path/to/script.sh"
    ]
  }

  connection {
    type     = "ssh"
    user     = "ubuntu"
    private_key = file("~/.ssh/id_rsa")
    host     = self.public_ip
  }
}

7. How do you implement blue-green deployment using Terraform?
1.	Create Two Identical Environments:
	Define two sets of infrastructure resources (e.g., two Auto Scaling Groups).
resource "aws_autoscaling_group" "blue" {
  # Configuration for blue environment
}

resource "aws_autoscaling_group" "green" {
  # Configuration for green environment
}
2.	Switch Traffic:
	Use a load balancer or DNS to switch traffic between the blue and green environments.
resource "aws_route53_record" "example" {
  name    = "example.com"
  type    = "A"
  ttl     = "300"
  records = [aws_lb.example.dns_name]
}
8. How do you integrate Terraform with CI/CD pipelines?
1.	Push Code to Repository: Store Terraform code in a version control system (e.g., GitHub).
2.	Set Up CI/CD Pipeline:
	Define stages for init, validate, plan, and apply.
	Example (GitLab CI/CD):
stages:
  - validate
  - plan
  - apply

validate:
  script:
    - terraform init
    - terraform validate

plan:
  script:
    - terraform plan

apply:
  script:
    - terraform apply -auto-approve

9. How do you manage secrets in Terraform?
•	Best Practices:
1.	Environment Variables:
	Store secrets in environment variables and reference them in Terraform.
variable "db_password" {
  type = string
}

resource "aws_db_instance" "example" {
  password = var.db_password
}
2.	Secret Management Tools:
	Use tools like HashiCorp Vault or AWS Secrets Manager.
data "aws_secretsmanager_secret_version" "example" {
  secret_id = "db_password"
}

resource "aws_db_instance" "example" {
  password = data.aws_secretsmanager_secret_version.example.secret_string
}

10. How do you upgrade Terraform from version 1.7 to 1.8?
•	Steps:
1.	Review Upgrade Guide: Check the official Terraform upgrade guide for version 1.8.
2.	Test in Non-Prod Environment: Apply the upgrade in a non-production environment.
3.	Update Configuration Files: Modify deprecated syntax or features.
4.	Monitor and Document: Monitor the infrastructure after the upgrade and document changes.

11. Simulation Scenario: Destroying a Single Resource
Q: You have 20 servers managed by Terraform, but you want to delete only one. How would you do this?
•	Use Terraform Destroy with Target:
terraform destroy -target aws_instance.example[0]
This command destroys only the specified resource without affecting others.

12. Simulation Scenario: Using Terraform Count Feature
Q: You need to create 5 EC2 instances. How would you do this without duplicating code?
•	Use Count Meta-Argument:
resource "aws_instance" "example" {
  count         = 5
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
}
Documentend by: Azizul Maqsud
https://www.youtube.com/@Learn_IT_with_Azizul/videos 
